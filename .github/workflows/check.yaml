name: build

on:
  push:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1

      - name: Lint with rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt

      - name: Lint with clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features

  native:
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        node-version: [12, 14, 16]
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install latest rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1

      - run: npm install cargo-cp-artifact --global
      - run: npm run build
      - run: npm run package

#
#  manylinux:
#    runs-on: ubuntu-latest
#    needs: lint
#    strategy:
#      fail-fast: false
#      matrix:
#        target: [aarch64, armv7, x86_64, i686]
#        python: [
#          { version: '3.6', abi: 'cp36-cp36m' },
#          { version: '3.7', abi: 'cp37-cp37m' },
#          { version: '3.8', abi: 'cp38-cp38' },
#          { version: '3.9', abi: 'cp39-cp39' },
#        ]
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v1
#        with:
#          submodules: true
#
#      - uses: messense/maturin-action@v1
#        env:
#          PYO3_CROSS_LIB_DIR: /opt/python/${{ matrix.python.abi }}/lib
#        with:
#          manylinux: auto
#          command: build
#          args: -i python${{ matrix.python.version }} --release --out dist --no-sdist
#          target: ${{ matrix.target }}
##      - uses: uraimo/run-on-arch-action@v2.0.5
##        if: matrix.target != 'ppc64'
##        name: Install built wheel
##        with:
##          arch: ${{ matrix.target }}
##          distro: ubuntu18.04
##          githubToken: ${{ github.token }}
##          # Mount the dist directory as /artifacts in the container
##          dockerRunArgs: |
##            --volume "${PWD}/dist:/artifacts"
##          install: |
##            apt-get update
##            apt-get install -y --no-install-recommends python3 python3-pip
##            pip3 install -U pip pytest
##          run: |
##            ls -lrth /artifacts
##            pip3 install rjmespath --no-index --find-links /artifacts --force-reinstall
##            cd tests && pytest
#      - name: Upload wheels
#        uses: actions/upload-artifact@v2
#        with:
#          name: wheels
#          path: dist
#
#  release:
#    name: Release
#    runs-on: ubuntu-latest
##    if: "startsWith(github.ref, 'refs/tags/')"
#    needs: [ non-linux, manylinux ]
#    steps:
#      - uses: actions/download-artifact@v2
#        with:
#          name: wheels
#      - uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#      - name: Publish to PyPi
#        env:
#          TWINE_USERNAME: __token__
#          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
#        run: |
#          pip install --upgrade twine
#          twine upload --skip-existing *